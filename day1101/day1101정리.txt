멤버변수를 하나 추가한다
==> 파일을 저장한 이후에 혹은 파일을 열어온 이후에 변경된 내용이 있는지 없는지 판별할 변수
한 글자라도 변경이 되는 순간 true를 저장하고 저장한 순간 열어온 순간 변경된 내용이 없으면 false를 저장한다

새파일을 누르면 저 변수가 true인지를 판별하여 저장하겠습니까? 라고 물어보는 변수를 만든다

네트워크프로그래밍
==> 네트워크상의 두대이상의 컴퓨터끼리 서로 데이터를 주고받는 프로그래밍

==> 자바에서는 네트워크프로그램을 위해 java.net 패키지에 관련 클래스와 인터페이스들을 모아 두었다

네트워크 기본 용어
-ip address
==> 네트워크상의 특정 컴퓨터를 구별하기 위한 식별자를 말한다
==> 네트워크 통신을 하려면 통신할 대상 컴퓨터를 정해야 한다
	ip address를 갖고 정할 수 있다
	
-port 번호
==> 하나의 컴퓨터에서 동시에 여러개의 네트워크 프로그램이 실행될 수 있다
이 때 특정 프로그램을 식별하기 위한 역할을 port번호로 구별한다
그러니까 하나의 컴퓨터를 구별하기 위한 식별자는 ip address이고
그 컴퓨터가 동시에 실행되는 프로그램을 식별하는 것은 port번호이다

줌도 실행시켜놓고 카카오톡도 실행시켜놓았다
카카오톡에 작성한 메세지가 줌으로 가면 이상하다
그러니 특정 네트워크 프로그램을 식별하기 위한 식별자 역할이 필요하다

우리가 만드는 네트워크 프로그램에도 포트번호를 정해놓고 그 포트번호로 접속하도록 해야 한다

-TCP 방식
==> 현실세계의 전화와 같은 개념으로 통신을 할 컴퓨터와 연결을 먼저 맺어 놓고
그 연결된 회선을 통해 메세지를 주고받는 방식
- 신뢰성이 높다 (장점)
- 네트워크의 부담이 높다 (단점)

자바에서는 Socket클래스와 ServerSocket을 이용하여 TCP방식의 네트워크 프로그램을 이용할 수 있다

-UDP 방식
==> 현실세계의 편지와 같은 개념으로 통신을 할 컴퓨터와 연결을 맺지 않고 데이터를 무조건 보내는 방식	
- 신뢰성이 낮다(중간에 잃어버릴 수 있다) (단점)
- 네트워크 부담이 적다 (장점)

자바에서는 DatagramPacket과 DatagramSocket을 이용하여 UDP방식의 네트워크 프로그램을 구현할 수 있다
연결을 먼저 맺어 놓은 게 아니기 때문에 데이터를 보낼 때마다 목적지와 주소와 데이터가 합쳐진 Packet 단위로 
전송해야 한다

InetAddress
==> 인터넷상의 컴퓨터이름 및 ip주소의 정보를 위한 클래스이다
이것을 생성자가 없고 다음의 static메소드를 통해 객체를 생성할 수 있다

static InetAddress	getByName(String host)
Determines the IP address of a host, given the host's name.

ip주소를 사람들이 기억하기는 어렵다
그 ip주소에 매칭되는 문자로 되어있는 것을 대신 사용한다
이것을 도메인네임이라고 한다

규모가 큰 서비스인 경우 위험에 대비하기 위해 세컨드리 서버를 둘 수 있다
getAllbyName(String host)이 메소드를 이용하면 그 컴퓨터이름에 해당하는
모든 InetAddress객체를 읽어 올 수 있다

URL: Uniform Resource Locator
	인터넷 상의 문서의 위치를 갖고 있는 객체이다
	이것을 이용하면 스트림을 통해 인터넷상의 문서의 내용을 수집할 수 있다
	네트워크를 통해 데이터를 수신할 때에는 byte의 일정한 양의 배열로 수신한다
	
	이것을 다시 문자열로 만들기 위해서는 String(byte []data)의 생성자를 이용한다
	그러나 한글인 경우에는 모두 한글이 깨져서 표현이 된다
	
	한글처리를 위해서는 다음의 생성자를 이용한다
	
Server
네트워크 상에서 서비스를 제공하는 컴퓨터 혹은 프로그램을 말한다

Client
네트워크상에서 서비슬르 제공받는 컴퓨터 혹은 프로그램을 말한다



TCP방식의 네트워크 프로그래밍 절차

서버 측
1) ServerSocket을 통하여 서버를 가동한다
	ServerSocket(int port)
	이 때 클라이언트에 약속된 포트번호를 정해야 한다
	계속하여 클라이언트가 접속할 때까지 무한 대기상태에 있어야 한다
	
3) 클라이언트의 요청을 수락한다
	Socket accept()
	이 때 반환되는 Socket을 통하여
	클라이언트와 데이터를 주고 받을 수 있다 (데이터소켓)
	
4) Socket을 통하여 데이터를 주고 받을 스트림을 생성	
	OutputStream	getOutputStream()
	InputStream		getInputStream()
	
5) 데이터를 주고받는다

6) 통신이 끝나면 사용했던 스트림을 닫아준다
	
클라이언트 측
2) Socket을 통하여 서버에 통신을 요청한다
	Socket(String host, int port)
	host는 서버의 ip주소이며
	port는 서버에서 정한 port번호이어야 한다

4) Socket을 통하여 데이터를 주고 받을 스트림을 생성	
OutputStream	getOutputStream()
InputStream		getInputStream()

5) 데이터를 주고받는다

6) 통신이 끝나면 사용했던 스트림을 닫아준다

ip주소 확인하는 명령
cmd창 열어서
c드라이브에서 ipconfig

내 컴퓨터의 ip주소 대신에 
127.0.0.1
localhost
를 사용할 수 있다