**테이블 삭제
drop table 테이블이름;

**예제의 부서 테이블 생성
create table dept(dno number, dname varchar2(20), dlocation varchar2(30));

데이터베이스 명령어
1. DCL: 데이터 제어어
		사용자계정을 생성, 권한 부여, 권한 제어

2. DDL: 데이터 정의어
		리소스(Table, View, Index ..) 생성, 제거, 변경

3. DML: 데이터 조작어 
		레코드를 추가, 수정, 검색, 삭제
		
sql>exit
c:\> sqlplus system/manager

sql>conn system/manager

**사용자 계정 생성하고 권한 부여하기
create user 유저이름 identified by 암호;
grant 권한이름1, 권한이름2,... to 유저이름;

create user c##madang identified by madang;
grant connect, resource,dba to c##madang;

SQL> conn c##madang/madang
연결되었습니다.

서점관리에 필요한 테이블들을 생성
도서: 도서번호, 도서명, 출판사명, 가격
고객: 고객번호, 고객이름, 주소, 전화
주문: 주문번호, 도서번호, 고객번호, 구매가격, 구매일

create table book(
bookid number primary key,
bookname varchar2(50),
publisher varchar2(50),
price number
);

create table customer(
	custid number primary key,
	name varchar2(20),
	address varchar2(50),
	phone varchar2(20)
);

create table orders(
	orderid number primary key,
	custid number references customer(custid),
	bookid number references book(bookid),
	saleprice number,
	orderdate date	
);

**book테이블에 자료 추가하기
insert into book values(1, '축구의 역사', '굿스포츠', 7000);
insert into book values(2, '축구아는 여자', '나무수', 13000);
insert into book values(3, '축구의 이해', '대한미디어', 22000);
insert into book values(4, '골프 바이블', '대한미디어', 35000);
insert into book values(5, '피겨 교본', '굿스포츠', 8000);
insert into book values(6, '역도 단계별 기술', '굿스포츠', 6000);
insert into book values(7, '야구의 추억', '이상미디어', 20000);
insert into book values(8, '야구를 부탁해', '이상미디어', 14000);
insert into book values(9, '올림픽 이야기', '삼성당', 7500);
insert into book values(10, 'Olympic Champions', 'Pearson', 13000);


**데이터를 추가, 수정, 삭제한 후에는 반드시 commit해야 한다


**customer테이블에 자료 추가하기
insert into customer values(1, '박지성', '영국 멘체스타','010-5000-0001');
insert into customer values(2, '김연아', '대한민국 서울','010-6000-0001');
insert into customer values(3, '장미란', '대한민국 강원도','010-7000-0001');
insert into customer values(4, '추신수', '미국 클리블랜드','010-8000-0001');
insert into customer values(5, '박세리', '대한민국 대전', null);

 desc orders;
 이름                                      널?      유형
 ----------------------------------------- -------- ----------------------------
 ORDERID                                   NOT NULL NUMBER
 CUSTID                                             NUMBER
 BOOKID                                             NUMBER
 SALEPRICE                                          NUMBER
 ORDERDATE                                          DATE
 
 **order테이블에 자료 추가하기
 insert into orders values(1,1,1,6000,'2021/11/01');
 insert into orders values(2,1,3,21000,'2021/11/03');
 insert into orders values(3,2,5,8000,'2021/11/03');
 insert into orders values(4,3,6,6000,'2021/11/03');
 insert into orders values(5,4,7,20000,'2021/11/04');
 insert into orders values(6,1,2,12000,'2021/11/05');
 insert into orders values(7,4,8,13000,'2021/11/07');
 insert into orders values(8,3,10,12000,'2021/11/07');
 insert into orders values(9,2,10,7000,'2021/11/09');
 insert into orders values(10,3,8,13000,'2021/11/08');
 
 데이터베이스 명령어
 (SQL- Structured Query Language)
 - DCL
 - DDL
 - DML
 
 DML(데이터 조작어)
 - insert	데이터를 추가
 - select	데이터를 조회(검색)
 - update	데이터를 수정
 - delete	데이터를 삭제
 
** 데이터 조작어--> 검색( select )
==> 데이터를 조회하는 명령어를 특별히 query라고도 부른다
 
** select 명령어의 기본 구조
   select 컬럼명1, 컬럼명2,...
   from 테이블이름 where 조건식;
   
   select bookname,price from book;
   
중복을 제거하고 한번만 출력하고자 할 때에 distinct 키워드를 사용한다
distinct는 컬럼 하나를 보고자 할 때 사용하고
여러 개 컬럼에서는 사용 못한다
select distinct publisher from book;

**where조건식에 사용하는 연산자들

비교연산자: =, >, >=, <, <= ,<>(같지않다) !=도 같지않다로 사용 가능

범위연산자: between 값1 and 값2

집합연산자: in (값1, 값2, ...)			not in(값1, 값2, ...)

패턴연산자: like
==> 문자열 데이터에 있어 어떠한 패턴을 따르는지 검사할 때 사용한다

==> 예를 들어 이름이 '김'으로 시작하는 데이터를 검색
	혹은 도서명에 '축구'가 들어가는 데이터를 검색
	
==> like연산자와 같이 사용되는 기호
		_ 모르는 하나의 글자를 대신하는 기호
			==> 반드시 하나의 글자가 있어야 한다
			
		% 모르는 아무 글자를 대신하는 기호
			==> 글자가 있어도 좋고 없어도 좋고 글자길이가 상관없다
			
		select * from customer where name like '김%';
		==> 김연아
		==> 김
		==> 김숙
		==> 김마리아
		
		select * from customer where name like '김_';
		==> 김숙
		
		select * from customer where name like '김__';
		==> 김연아
		
		select * from book where bookname like '축구%';
		==> 책 이름이 축구로 시작하는 도서를 모두 검색
		
		select * from book where bookname like '%축구';
		==> 책 이름이 축구로 끝나는 도서를 모두 검색
		
		select * from book where bookname like '%축구%';
		==> 책이름 중에 어디라도 축구 글자가 들어가는 모든 도서를 검색
		
논리연산자: and, or, not

null연산자: is null		is not null 

순서대로 출력
==> select 명령어 끝에 order by를 사용한다

오름차순 정렬 order by 컬럼 [asc]	<-- 생략하면 기본이 오름차순
내림차순 정렬 order by 컬럼 [desc]

order by 컬럼1 [asc|desc], 컬럼2[asc|desc]

select * from book order by bookname asc;