네트워크 통신 방식
1. TCP방식
	==> 상대방 컴퓨터와 먼저 연결을 먼저 맺은 후 그 연결된 회선을 통해 데이터를 주고받는 방식

2. UDP방식
	==> 상대방 컴퓨터와 연결을 먼저 맺지 않고 그냥 데이터를 막 보내는 방식
		그래서 데이터를 보낼 때마다 데이터를 보내는 그 시점에 보내고자 하는 데이터 뿐만 아니라
		"목적지주소"와 데이터를 하나의 세트로 만들어야 한다
		==> 그것을 패킷이라고 한다
		
		UDP방식의 데이터를 전송받기 위해서는 DatagramSocket클래스의 send메소드와 receive메소드를 이용한다
		이때 send메소드 receive메소드는 DatagramPacket을 매개변수로 전달해야 한다
		데이터를 보낼 떄도, 받을 때도 패킷에 담아 보내고 담아 와야 한다
		


CUI: character user interface
==> 프로그램 사용을 문자로 하는 방식
==> 컴퓨터에게 일을 시킬 때 문자로 시키는 방식

GUI: graphic user interface
==> 프로그램 사용을 그래픽 화면을 통해 사용하는 방식
==> 컴퓨터에게 일을 시킬 때에 그래픽화면의 버튼을 누르거나 하여 시키는 방식


GUI를 위하여 제공하는 패키지
--> java.awt		==> 자바 초기버전부터 제공하며 운영체제마다 모양이 다르다
--> javax.swing		==> 자바 1.4이후에 발표되었으며 조금 더 미려하고 모든 운영체제에서 동일한 모양을 보여줌

GUI프로그램이 되려면 가장 먼저 창을 만들어야한다
그 창을 만들어주는 클래스가 JFrame이다

창을 만든다음 그 창안에 표현하고자 하는 화면을 구성한다

JFrame의 상속계층은 다음과 같다
java.lang.Object
	java.awt.Component
		java.awt.Container
			java.awt.Window
				java.awt.Frame
					javax.swing.JFrame

모든 화면을 구성하는 요소들은 
그러니까 JButton, JTextArea,JTextField의 조상은 Component이다

배치관리자 LayoutManager
==> 컴포넌트들을 화면에 배치하기 위한 클래스들을 말한다
1) FlowLayout
	==> 물 흐르듯이 컴포넌트들을 위에서 아래로, 왼쪽에서 오른쪽으로 자동으로 배치하는 방식이다
2) GridLayout
	==>	화면을 행과 열로 분할하여 컴포넌트들을 배치하는 방식이다
		
3) BorderLayout
	==>	화면을 위,아래,좌,우,가운데 다섯개의 영역으로 분할하여 배치하는 방식이다
		컴포넌트의 수에 따라 위,아래,좌,우는 생략할 수 있지만
		가운데는 생략할 수 없다
		가운데에 중요한 구성요소를 두고 그것을 중심으로 덜 중요한 구성요소들을 위,아래,좌,우에 배치하는 방식이다
		
==> 복잡한 화면을 구성할 때에는 프레임 하나만으로는 화면을 구성하기 어렵다
	이럴 때에 서브컨테이너 역할을 하는 패널을 이용한다

==> 패널은 기본 레이아웃방식이 FlowLayout이고 프레임은 기본 레이아웃방식이 BorderLayout이다
	BorderLayout에서 컴포넌트를 담을 때 위치를 지정하지 않으면 기본값은 CENTER이다