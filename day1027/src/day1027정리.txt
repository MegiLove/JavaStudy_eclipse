Thread의 우선순위
필요하다면 Thread의 우선순위를 정할 수 있다
우선순위 설정을 위하여 setPriority메소드를 이용한다
매개변수로 1에서 10까지의 정수를 전달한다
숫자가 높을수록 우선순위가 높다

우선순위가 높다는 것은 다른 쓰레드보다는 일을 빨리 끝내달라는 의미이다

우선순위의 최고값 10대신에 상수 Thread.MAX_PRIORITY, 최저값 1대신에 Thread.MIN_PRIORITY,
중간값 5대신에 상수 Thread.NORM_PRIORITY을 사용할 수 있다

==> 우선순위를 높게 설정하는 것은 가급적이면 일을 빨리 끝내달라고 요청하는 것이다
반드시 그 쓰레드가 일을 빨리 끝내는 것이 보장되지는 않는다

join메소드
==> 쓰레드가 종료될 때까지 대기시키기 위한 메소드이다
==> 쓰레드를 가동시키면 그때부터는 명령어가 순서대로 동작하지 않고
가급적이면 공평하게 실행되게끔 스케줄링해준다
만약에 어떤 명령어를 쓰레드가 완전히 종료한 다음 실행해야 할 때에는
join메소드를 호출하여 쓰레드가 모두 종료될때까지 대기한다

임계영역 Critical Section
두 개 이상의 쓰레드가 공유하는 자원(맴버변수)에 대하여 한 번에 하나의 쓰레드에게만 접근을 허용하는 영역(멤버변수)를 말한다
자바에서는 임계영역의 처리를 위하여 "synchronized"를 사용한다

한 번에 하나의 쓰레드에게만 접근을 허용해야 하는 메소드의 이름 왼쪽에
synchronized라고 써주면 자바가 알아서 "임계영역"의 처리를 해준다
즉, 한 번에 하나의 쓰레드만 접근하도록 lock을 걸어주고 일이 끝나면 lock을 풀어준다

TVArs 클래스이름을 나중에 Account로 바꾸고 싶다
이름을 변경하면 파일명과 클래스이름, 또 그 클래스를 사용하는 다른 파일의 내용도 모두 변경된다
그러나 컴파일된 .class파일은 생성되지 않는다
여전히 TVArs.class만 있고 Account.class는 없는 상태이다
그래서 클래스 이름을 바꿀 때에는 그 파일을 열어 빈곳 아무데나 엔터 한번 치고 저장해야한다
저장하면 자동으로 컴파일된다

쓰레드를 가동시키면 가급적으로 서로 공평하게 실행이 되게끔 스케줄링을 해준다
늘 언제나 공평하게 실행이 되지는 않는다
어떤 특정 스레드가 연달아 동작하기도 한다

만약 두 개의 쓰레드가 반드시 공평하게 1:1로 동작해야 한다면
쓰레드 사이의 통신을 통하여 구현할 수 있다

자바의 모든 클래스들은 Object의 후손이다
우리가 만드는 모든 클래스는 묵시적으로 Object를 상속받는다
Object클래스에는 쓰레드사이의 통신을 위한 wait메소드와 notify메소드가 있다

wait를 쓰레드 자신을 대기상태로 두는 메소드이며 notify는 대기중인 다른 스레드를 깨워주는 메소드이다
즉, 다른 쓰레드가 일이 끝날 때까지 나는 대기(wait)상태에 있도록 하고
내가 일이 끝나면 notify()를 호출하여 대기상태에 있는 다른 쓰레드를 깨워줌으로서
쓰레드사이의 통신을 할 수 있다


파일 입출력 프로그래밍
프로그램 실행결과를 화면에 출력하면 휘발성이다
컴퓨터를 끄면 혹은 창을 닫으면 출력한 결과가 날아간다
만약 프로그램 실행결과를 영구적으로 기록해야 한다면 화면에 출력하는 대신 
파일로 출력할 수 있다

자바에서는 입력 및 출력을 위하여 우리가 일일이 고생할 필요없이 스트림을 만들어 제공한다
스트림은 순서있는 자료의 흐름을 말한다

안녕하세요라는 문자열을 출력하려면 순서대로 자료가 나가야 하고
또 읽어들일 때에도 순서대로 자료가 와야 한다

이와 같이 순서있는 자료의 흐름을 "스트림"이라고 한다

자바에서는 스트림(입출력)을 위한 클래스들을 java.io 패키지에 모아놓았다
------------------------------------------------------------------------

입출력(스트림)을 위한 최상위 클래스는 크게 두 가지 종류가 있다
문자 단위의 입출력
==> 문자 단위의 입출력은 말 그대로 문자를 출력하고 읽어들이는 것을 말한다
이렇게 생성된 파일은 메모장 같은 편집기에서 바로 내용을 확인할 수 있다
이것은 확장자를 일반적으로 txt로 만든다

바이트 단위의 입출력
==> 파일은 txt파일 이외의 그림파일이나 소리파일이나 동영상처럼 메모장에서 바로 내용을 확인할 수 없고
특정 프로그램에서 내용을 확인해야하는 파일들이 있다 이러한 파일은 바이트 단위의 입출력으로 처리해야 한다

문자단위의 입출력을 위한 클래스
Reader
Writer

바이트단위의 입출력을 위한 클래스
InputStream
OutputStream

파일의 사용이 끝나면 파일을 닫아주어야 한다
닫아주지 않으면 지금 당장은 오류가 나지 않을 수 있다만
이 파일을 만약에 다른 곳에서 써야한다면 여기서 닫아주지 않으면 다른 곳에서는 쓸 수 없는 상황이 된다


