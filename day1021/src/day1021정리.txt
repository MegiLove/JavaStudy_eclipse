많은 양의 데어터를 처리하기 위해 배열을 사용
하지만 배열에는 자료형이 같은 데이터만 담을 수 있고 크기를 변경할 수 없다
원래 크기보다 더 작은 데이터를 담으면 메모리 낭비이고, 원래 크기보다 더 많은 데이터를 담으려면
다시 메모리를 확보하고 원래의 데이터를 다 옮겨주는 작업이 필요하다

배열의 단점을 해결하기 위해 자바에서는 컬렉션프레임워크를 제공한다
즉, 컬렉션프레임워크란 동적배열의 개념으로 많은 양의 자료를 처리하기 위한 자료구조이며
자료형이 다른 것을 담을 수도 있고 동적으로 데이터를 추가하거나 삭제하는 작업이 편리하다

컬렉션프레임워크의 종류에는 Set,List,Map이 있다
세가지 모두 많은 자료를 처리하기 위한 자료구조이며 
동적으로 데이터를 추가하거나 삭제하거나 서로 다른 자료형을 담을 수 있다

Set의 특징은 데이터의 중복을 허용하지 않는다
List는 중복된 데이터를 허용한다
Set과 List가 배열처럼 인덱스에 의해 자료에 접근하는 방식이라면
Map은 인덱스대신에 자료에 접근하기 위하여 key를 이용하는 방식이다

key와 key에 해당하는 value가 한쌍으로 이루어진 자료구조가 Map이다

Set
데이터의 중복을 허용하지 않는다
HashSet==> 데이터의 중복을 허용하지 않고 데이터의 순서도 유지하지 않는다

LinkedHashSet==> 데이터의 중복을 허용하지 않고 데이터의 순서를 유지한다

TreeSet==> 데이터의 중복을 허용하지 않고, 데이터를 정렬해준다 

자동 로또번호 생성기
배열: 중복제거를 위해서 내가 프로그램 해야함
set: 중복제거를 위해 내가 프로그램 안해도 된다

Random 클래스
임의의 값을 생성하기 위한 클래스이다

nextInt()			int가 표현할 수 있는 최소값~최대값 범위 안에 있는 난수를 발생
nextInt(int bound)	0~bound-1사이의 난수를 발생

List
어떠한 자료형이던지 담을 수 있고, 데이터의 추가 및 삭제가 용이하며 중복된 자료를 허용한다

List인터페이스를 구현한 클래스엔 ArrayList,LinkedList,Vector등이 있다
이것들의 사용하는 방법은 거의 유사하다
자바초기에는 Vector를 많이 사용하였으나 현재에는 Vector보다는 ArrayList를 더 많이 사용한다
ArrayList와 LinkedList는 사용하기 위한 메소드는 동일하지만
내부적으로 동작하는 방식이 다르다

데이터의 중간에 추가, 삭제가 빈번한 경우라면 ArrayList보다는 LinkedList를 사용하는 것이 좋다
ArrayList는 중간에 데이터를 추가, 삭제할 때에 마치 배열처럼 동작한다
중간에 데이터를 추가하는 경우라면 내부적으로 다시 메모리를 할당하고
자료를 일일이 다 옮겨주는 작업을 수행한다

그러나 LinkedList는 추가하는 자료의 앞뒤의 주소값만 변경이 된다

배열의 단점을 해결하기 위해 컬렉션프레임워크를 사용한다
배열의 단점은 배열의 요소는 자료형이 동일해야 한다는 것이다
또, 크기가 고정되어 있다는 것이다

그래서 컬렉션프레임워크에는 자료형이 다른것들을 담을 수 있다
또, 자료를 추가할 때마다 크기가 동적으로 늘어난다

자바초기에는 자료형이 다른 것을 담을 수 있는 게 좋은 줄로만 알았다
그런데, 이것저것 담아놓고 보니 꺼내와서 사용하기에는 불편하다

그래서 자바 5.0이후부터는 가급적이면 컬렉션프레임워크에 담을 데이터를 한정하여 사용하기를 권장한다
==> 제네릭

ArrayList list= new ArrayList();
==>라고 하면 list에는 온갖 자료형을 담을 수 있다

현재에는 이것보다는 다음과 같이 제네릭을 사용하여 list에 담을 수 있는 자료형을 한정하여 사용하기를 권장한다

ArrayList <String> list= new ArrayList<String>();
==> 라고하면 list에는 String만 담을 수 있다

기본자료형 int로 제한할 수는 없고 기본자료형 int를 객체를 만들어주는 Interger클래스를 사용해야한다
이와 같이 기본자료형을 객체를 만들어주는 클래스들을 Wrapper클래스라고 한다
boolean		Boolean
char		Character
byte		Byte
short		Short
int			Integer
long		Long
float		Float
double		Double

ArrayList<String> list= new ArrayList<String>();
list안에는 String을 담을 수 있다

ArrayList<ArrayList<String>> list= new ArrayList<ArrayList<String>>();
list안에 담는 자료형이 ArrayList입니다

컬렉션프레임워크의 종류

Set 자료의 중복을 허용하지 않는다

List 자료의 중복을 허용한다

Map key와 value가 한쌍으로 이루어진 자료구조이다
map은 인덱스가 아니라 key에 의해서 데이터에 접근하는 방식이다
key자체가 무슨 데이터인지 설명하는 역할을 한다
ex) map.get("이름");

이때 map에서는 key는 중복될 수는 없다
그러나 value는 중복할 수 있다








