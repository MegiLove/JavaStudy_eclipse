NaN= Not a number;



finally
예외가 발생하든 안 발생하든 반드시 처리해야할 명령어들을 쓰기 위하여 사용하는 문장

finally에는 주로 어떤 명령어들을 쓰나요?
파일처리나, 네트워크 통신이나, 데이터베이스 연결프로그램에서 작업이 끝난 다음에는 
사용한 자원을 반드시 닫아 주어야 한다.
이러한 자원을 닫아 주는 명령어 (close)는 
예외가 발생하거나 정상적으로 동작하거나 반드시 닫아 주어야 합니다.
이러한 명령어를 finally로 작성합니다.



e.printStackTrace()는 무엇인가?
예외가 발생하는 어떤 메소드가 있을때에 그 메소드를 다른 메소드가 호출하고 
또, 그 메소드를 또다른 메소드가 호출하고.. 막 이렇게 되어 있을때에 
누가 근본적으로 예외를 발생시키는가?를 추적하기 위하여 사용하는 메소드


Thread
멀티 프로세스: 하나의 컴퓨터에서 한꺼번에 동시에 여러프로그램을 동시 실행시킬 수 있는 것
멀티 쓰레드: 하나의 프로그램에서 동시에 여러개의 메소드를 동작시키는 것
Person p= new Person("홍길동");
		Person p2= new Person("유관순");
		p.sayHello();
		p2.sayHello();
이 코드를 실행시키면
p의 sayHello가 다 끝나야 p2에게 기회가 온다

가능하면 두 개의 객체가 동시에 공평하게 동작하게끔
하기 위해서 멀티쓰레드 프로그래밍을 구현한다
자바에서는 멀티쓰레드 프로그래밍을 위해 Thread라는 클래스와 Runnable이라는 인터페이스를 제공한다



Thread 클래스를 이용하여 멀티쓰레드 프로그래밍하기
Thread클래스를 상속받아 클래스를 만들고 이때에 run메소드를 오버라이딩하여
동시에(공평하게) 실행시킬 명령어들을 써준다
쓰레드를 가동시키기 위해서는 객체 생성한 다음 start()를 호출한다
그런데 start를 호출하지 않고 run을 직접 호출하면
쓰레드가 가동되지 않고 일반 메소드처럼 동작한다




Runnable 인터페이스를 구현하여 멀티쓰레드 프로그래밍 만들기
-Runnable 인터페이스를 구현한 클래스를 만들고 이때에 run메소드를 오버라이딩하여
동시에 실행시키고자 하는 명령어들을 써준다

Runnable 인터페이스에는 start메소드가 없다
쓰레드를 가동하기 위해서 Thread객체로 포장하여 start()를 호출한다